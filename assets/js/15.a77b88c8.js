(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{370:function(t,s,n){"use strict";n.r(s);var a=n(42),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、排序方法与复杂度归类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、排序方法与复杂度归类"}},[t._v("#")]),t._v(" 一、排序方法与复杂度归类")]),t._v(" "),n("p",[t._v("（1）几种最经典、最常用的排序方法：冒泡排序、插入排序、选择排序、快速排序、归并排序、计数排序、基数排序、桶排序。")]),t._v(" "),n("p",[t._v("（2）复杂度归类")]),t._v(" "),n("p",[t._v("冒泡排序、插入排序、选择排序 O(n^2)")]),t._v(" "),n("p",[t._v("快速排序、归并排序 O(nlogn)")]),t._v(" "),n("p",[t._v("计数排序、基数排序、桶排序 O(n)")]),t._v(" "),n("h2",{attrs:{id:"二、如何分析一个-排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、如何分析一个-排序算法"}},[t._v("#")]),t._v(" 二、如何分析一个“排序算法”？")]),t._v(" "),n("h3",{attrs:{id:"算法的执行效率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法的执行效率"}},[t._v("#")]),t._v(" 算法的执行效率")]),t._v(" "),n("ol",[n("li",[t._v("最好、最坏、平均情况时间复杂度。")]),t._v(" "),n("li",[t._v("时间复杂度的系数、常数和低阶。")]),t._v(" "),n("li",[t._v("比较次数，交换（或移动）次数。")])]),t._v(" "),n("h3",{attrs:{id:"排序算法的稳定性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序算法的稳定性"}},[t._v("#")]),t._v(" 排序算法的稳定性")]),t._v(" "),n("ol",[n("li",[t._v("稳定性概念：如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。")]),t._v(" "),n("li",[t._v("稳定性重要性：可针对对象的多种属性进行有优先级的排序。")]),t._v(" "),n("li",[t._v("举例：给电商交易系统中的“订单”排序，按照金额大小对订单数据排序，对于相同金额的订单以下单时间早晚排序。用稳定排序算法可简洁地解决。先按照下单时间给订单排序，排序完成后用稳定排序算法按照订单金额重新排序。")])]),t._v(" "),n("h3",{attrs:{id:"排序算法的内存损耗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序算法的内存损耗"}},[t._v("#")]),t._v(" 排序算法的内存损耗")]),t._v(" "),n("p",[t._v("原地排序算法：特指空间复杂度是O(1)的排序算法。")]),t._v(" "),n("h2",{attrs:{id:"三、冒泡排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、冒泡排序"}},[t._v("#")]),t._v(" 三、冒泡排序")]),t._v(" "),n("p",[t._v("冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求，如果不满足就让它俩互换。")]),t._v(" "),n("h3",{attrs:{id:"稳定性-冒泡排序是稳定的排序算法。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#稳定性-冒泡排序是稳定的排序算法。"}},[t._v("#")]),t._v(" 稳定性：冒泡排序是稳定的排序算法。")]),t._v(" "),n("h3",{attrs:{id:"空间复杂度-冒泡排序是原地排序算法。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-冒泡排序是原地排序算法。"}},[t._v("#")]),t._v(" 空间复杂度：冒泡排序是原地排序算法。")]),t._v(" "),n("h3",{attrs:{id:"时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度：")]),t._v(" "),n("ol",[n("li",[t._v("最好情况（满有序度）：O(n)。")]),t._v(" "),n("li",[t._v("最坏情况（满逆序度）：O(n^2)。")]),t._v(" "),n("li",[t._v("平均情况：\n“有序度”和“逆序度”：对于一个不完全有序的数组，如4，5，6，3，2，1，有序元素对为3个（4，5），（4，6），（5，6），有序度为3，逆序度为12；对于一个完全有序的数组，如1，2，3，4，5，6，有序度就是n*(n-1)/2，也就是15，称作满有序度；逆序度=满有序度-有序度；冒泡排序、插入排序交换（或移动）次数=逆序度。\n最好情况下初始有序度为n*(n-1)/2，最坏情况下初始有序度为0，则平均初始有序度为n*(n-1)/4，即交换次数为n*(n-1)/4，因交换次数<比较次数<最坏情况时间复杂度，所以平均时间复杂度为O(n^2)。")])]),t._v(" "),n("p",[t._v("冒泡练习")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class BubbleSortUtils {\n\n\tpublic static void main(String[] args) {\n\t\tint[] a = { 10, 20, 23, 18, 19, 23, 25 };\n\t\tBubbleSortUtils.bublleSort(a);\n\t\tSystem.out.print(Arrays.toString(a));\n\t}\n\n\tpublic static void bublleSort(int arr[]) {\n\t\tif (arr == null && arr.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = 0; j < arr.length - i - 1; ++j) {\n\t\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t\tint tmp = arr[j];\n\t\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\t\tarr[j + 1] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br")])]),n("h2",{attrs:{id:"四、插入排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、插入排序"}},[t._v("#")]),t._v(" 四、插入排序")]),t._v(" "),n("p",[t._v("插入排序将数组数据分成已排序区间和未排序区间。初始已排序区间只有一个元素，即数组第一个元素。在未排序区间取出一个元素插入到已排序区间的合适位置，直到未排序区间为空。")]),t._v(" "),n("h3",{attrs:{id:"空间复杂度-插入排序是原地排序算法。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-插入排序是原地排序算法。"}},[t._v("#")]),t._v(" 空间复杂度：插入排序是原地排序算法。")]),t._v(" "),n("h3",{attrs:{id:"时间复杂度-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-2"}},[t._v("#")]),t._v(" 时间复杂度：")]),t._v(" "),n("ol",[n("li",[t._v("最好情况：O(n)。")]),t._v(" "),n("li",[t._v("最坏情况：O(n^2)。")]),t._v(" "),n("li",[t._v("平均情况：O(n^2)（往数组中插入一个数的平均时间复杂度是O(n)，一共重复n次）。\n稳定性：插入排序是稳定的排序算法。\n插入练习")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class InsertSortUtils {\n\n\tpublic static void main(String[] args) {\n\t\tint[] a = { 10, 20, 23, 18, 19, 23, 25 };\n\t\tInsertSortUtils.insertSort(a);\n\t\tSystem.out.print(Arrays.toString(a));\n\t}\n\t\n\t\n\tpublic static void insertSort(int arr[]) {\n\t\tfor (int i = 1; i < arr.length; i++) {\n\t\t\t//参考值\n\t\t\tint tmp = arr[i];\n\t\t\t//从参考值前面一个元素开始从后往前查找\n\t\t\tint j = i - 1;\n\t\t\tfor (; j >= 0; j--) {\n\t\t\t\t//假如找到比参考值大，数据移动\n\t\t\t\tif (arr[j] > tmp) {\n\t\t\t\t\tarr[j + 1] = arr[j];\n\t\t\t\t} else {\n\t\t\t\t\t// 跳出循环\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr[j + 1] = tmp;\n\t\t}\n\t}\n\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br")])]),n("h2",{attrs:{id:"五、选择排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、选择排序"}},[t._v("#")]),t._v(" 五、选择排序")]),t._v(" "),n("p",[t._v("选择排序将数组分成已排序区间和未排序区间。初始已排序区间为空。每次从未排序区间中选出最小的元素插入已排序区间的末尾，直到未排序区间为空。")]),t._v(" "),n("h3",{attrs:{id:"空间复杂度-选择排序是原地排序算法。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-选择排序是原地排序算法。"}},[t._v("#")]),t._v(" 空间复杂度：选择排序是原地排序算法。")]),t._v(" "),n("h3",{attrs:{id:"时间复杂度-都是o-n-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-都是o-n-2"}},[t._v("#")]),t._v(" 时间复杂度：（都是O(n^2)）")]),t._v(" "),n("ol",[n("li",[t._v("最好情况：O(n^2)。")]),t._v(" "),n("li",[t._v("最坏情况：O(n^2)。")]),t._v(" "),n("li",[t._v("平均情况：O(n^2)。\n稳定性：选择排序不是稳定的排序算法。")])]),t._v(" "),n("p",[t._v("选择练习")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class SelectionSortUtils {\n\n\tpublic static void main(String[] args) {\n\t\tint[] a = { 10, 20, 23, 18, 19, 23, 25 };\n\t\tSelectionSortUtils.selectionSort(a);\n\t\tSystem.out.print(Arrays.toString(a));\n\t}\n\tpublic static void selectionSort(int[] arr) {\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tint minIndex = i;\n\t\t\tfor (int j = i; j < arr.length; j++) {\n\t\t\t\tminIndex = arr[minIndex] < arr[j] ? minIndex : j;\n\t\t\t}\n\t\t\tint tmp = arr[i];\n\t\t\tarr[i] = arr[minIndex];\n\t\t\tarr[minIndex] = tmp;\n\t\t}\n\t}\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);